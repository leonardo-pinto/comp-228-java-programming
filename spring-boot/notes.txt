** What is Spring Container? **

Spring Container manages Spring Beans and their life cycle
1. Bean Factory: Basic Spring Container
2. ** Application Context: Advanced Spring Container with enterprise-specific features
	a. Easy to use in web applications
	b. Easy internationalization
	c. Easy integration with Spring AOP

** Java Bean vs Spring Bean **
- POJO (Plain Old Java Object)
	No constraints
	Any Java object is a POJO
- Java Bean (EJB)
	Should have a public default constructor
	Should have Getters and Setters
	Should implement Serializable interface
- Spring Bean
	Anything that is managed by Spring framework
	Spring uses IOC Container (Bean Factory or ApplicationContext) to manage these objects
	
** How can I list all Spring Beans? **
	for (String bean:context.getBeanDefinitionNames()) {
            System.out.println(bean);
        }
		
** What if multiples matching beans available? **
	Set Bean and Primary or add Qualifier
	
** How Spring can auto-wire and create our objects? **
	@Component
	@ComponentScan("<package-path>")
	
** Dependency Injection Types **

- Constructor -> recommended
- Fields -> requires @Autowired
- Setter -> requires @Autowired

** Initialization of Spring Beans **

	- Default initialization is Eager
		- Errors in the configuration are discovered immediately at startup
	- @Lazy makes the initialization only when used
		- Not recommended and not frequently used
		- Lazy-resolution proxy will be injected instead of actual dependency
		
** Spring Bean Scopes **
	
	- Singleton
		One object instance per Spring IoC container
		@Scope(value=ConfigurableBeanFactory.SCOPE_SINGLETON) -> DEFAULT
		
	- Prototype
		Possibly many object instance per Spring IoC container
		@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)
		
	- Scopes applicable ONLY for web-apps Spring ApplicationContext
		- Request, Session, Application, WebSocket
		
	* Java Singleton (GOF) vs Spring Singleton	
		- Spring Singleton	
			One object instance per Spring IoC container
		Java Singleton (GOF)
			One object instance per JVM
			
** Jakarta Context & Dependency Injection (CDI)
	
	- Spring Framework v1 was released in 2004
	- CDI specification introduced into Java EE 6 platform in Dec 2009
	- Now called Jakarta Contexts and Dependency Injection (CDI)
	- CDI is a specification (interface)
		* Spring Framework implements CDI
	- Important Inject API Annotations (** add jakarta as dependency in pom)
		- Inject (~Autowired in Spring)
		- Named (~Component in Spring)
		- Qualifier
		- Scope
		- Singleton
		
** Annotations vs XML Configuration **

						Annotations 			XML Configuration
Ease of use				Very Easy 				Cumbersome
Short and concise		Yes 					No
Clean POJOs				No (use Annotations) 	Yes. No Change in POJO
Easy to Maintain		Yes 					No
Usage					Recent projects 		Legacy

** Spring Stereotype Annotations **

	@Component - Generic annotation applicable for any class
		Base for all Spring Stereotype Annotations
		Specializations of @Component
			@Service
			@Controller
			@Repository
	
	What should you use?
		Use the most specific annotation possible
	
** What's the most important goal of Spring Boot? **

	-> Help you build PRODUCTION-READY apps QUICKLY
		Build Quickly
			Spring Initializr
			Spring Boot Starter Projects
			Spring Boot Auto Configuration
			Spring Boot DevTools
		Be Production Ready
			Logging
			Different Configuration for Different Environment
			Monitoring (Spring Boot Actuator)
		
	-> pom.xml -> spring-boot-starter-web ->> dependencies
		spring-boot-starter -> launc Spring context
		spring-boot-starter-json -> bean <> json converter
		spring-boot-starter-tomcat -> run application
		spring-web and spring-webmvc -> Spring MVC
		
	-> Spring Boot provides variety of starter projects:
		- Web Application & REST API - Spring Boot Starter Web (spring-webmvc,
		spring-web, spring-boot-starter-tomcat, spring-boot-starter-json)
		- Unit Tests - Spring Boot Starter Test
		- Talk to db using JPA - Spring Boot Starter Data JPA
		- Talk to db using JDBC - Spring Boot Starter JDBC
		- Secure your web app or REST API - Spring Boot Starter Security

	-> Spring Boot DevTools
		- Increase developer productivity
		- Similar to Nodemon
		- Add dependency to pom.xml
		
** Managing Application Configuration using Profiles **
	-> Different configuration for each environment
	-> resources/application-<env>.properties
	-> applications.properties ->> spring.profiles.active=<env>
	
** Configuration Properties **

	-> Create configuration class
	-> @ConfigurationProperties(prefix="prefix")
	-> @Component
	-> In controller, autowire the class
	-> In application.properties pass the values e.g. -> prefix.name=john doe
	-> Different values for each environment (profile)
	
** Deployment with Spring Boot Embedded Servers **

	-> Install Java, run JAR file
	-> Maven -> clean install
	-> Embedded Server Examples
		spring-boot-starter-tomcat
		spring-boot-starter-jetty
		spring-boot-starter-undertow

** Monitor Applications using Spring Boot Actuator **

	-> Provides a number of endpoints
		- beans: Complete list of Spring beans in your app
		- health: Application health information
		- metrics: Application metrics
		- mappins: Details around Request Mappings
		
	-> pom.xml
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
	-> application.properties -> define which endpoints are going to be exposed
		e.g., management.endpoints.web.exposure.include=health,metrics
		
** Understanding Spring Boot vs Spring MVC vs Spring

	-> Spring Framework
		- Dependendy Injection
		- @Component, @Autowired, @ComponentScan
		- Just dependency injection is not sufficient
	-> Spring MVC
		- Makes building web applications easier
		- @Controller, @RestController, @RequestMapping("/")
	-> Spring Boot
		- Build Production-ready apps quickly
		- Starter Projects - make it easy to build variety of applications
		- Auto configuration - eliminate configuration to setup Spring, Spring MVC
		- Enable NFRs
			Actuator: enables advanced monitoring of applications
			Embedded Server: no need for separate application servers
			Logging and Error Handling
			Prfiles and Configuration Properties